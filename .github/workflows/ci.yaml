name: "CI"

on:
  push:
    branches:
      - development
      
  pull_request:
    branches:
      - 'main'
      
jobs:
  # codeql-analysis-call:
  #   uses: actions/reusable-workflows/.github/workflows/codeql-analysis.yml@main
     
  build:
    name: Build and Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3.5.2

      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.*

      - name: Run tests
        id: run-tests
        continue-on-error: true 
        run: |
          cd tests
          dotnet restore
          dotnet test -v q --nologo
      
      - name: Get approvers
        id: check-test-state
        if: steps.run-tests.outcome == 'failure'
        # set error state in job and trigger 
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: Astridstar
          minimum-approvals: 1
          issue-title: "Seeking approval for erroreous build"
          issue-body: "There are errors in the unit test.  Do you want to continue with the creating the release in preparation for deployment? Please approve or deny the deployment of version v1.3.5."
          exclude-workflow-initiator-as-approver: false
          additional-approved-words: 'yes'
          additional-denied-words: 'no'   

      - name: Preparing artifacts
        run: |
          ls -la
          echo "workspace value:" ${{ github.workspace }}
          tar -cvf datagen.tar ${{ github.workspace }}/bin/Debug/net7.0

      - uses: actions/upload-artifact@v3
        with:
          name: datagen.tar
          path: ${{ github.workspace }}/datagen.tar
    
  release:
    name: Create release 
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.ref_name == 'main' }}
    environment: UAT
    steps:
      - uses: actions/checkout@v3.5.2
      - name: Get release version
        id: get-release-version
        run: |
          cd ${{ github.workspace }}
          ls -la
          echo "version=$(jq -r .next_version ./versioning.json)" >> $GITHUB_OUTPUT 
          jq -r .next_version ./versioning.json

      - name: Downloading artifacts for release
        uses: actions/download-artifact@v3
        with:
          name: datagen.tar

      - run: |
          ls -la

      - name: gh create release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo ${{ steps.get-release-version.outputs.version }}
          gh release create ${{ steps.get-release-version.outputs.version }} --generate-notes
          gh release upload ${{ steps.get-release-version.outputs.version }} datagen.tar#${{ steps.get-release-version.outputs.version }}